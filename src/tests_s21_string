#include "s21_string.h"
#include <string.h>
#include <stdio.h>
#define s21_size_t unsigned long long
#define s21_NULL (void*)0

// checkmk tests_s21_string > tests_s21_string.c
// gcc -Wall -Werror -Wextra tests_s21_string.c s21_string.c -lcheck

// #suit s21_
// #tcase s21_
// #test test_s21_

#suite s21_memmove
#tcase s21_memmove
#test test_s21_memmove_01
    char str1[1024] = "Hello", str2[1024], str3[1024];
    s21_memmove(str2, str1, 6);
    memmove(str3, str1, 6);
    ck_assert_str_eq(str2, str3);
#test test_s21_memmove_02
    char str1[1024] = "Hello";
    fail_unless(s21_memmove(str1, str1, 0) == memmove(str1, str1, 0));
#test test_s21_memmove_03
    char str1[100] = "Hello", str2[100] = "Hello", str3[50] = "Hi";
    ck_assert_str_eq(s21_memmove(str1, str3, 10), memmove(str2, str3, 10));
#test test_s21_memmove_04
    char str1[50] = "Hello", str2[50] = "Hello", str3[100] = "HelloHi";
    ck_assert_str_eq(s21_memmove(str1, str3, 10), memmove(str2, str3, 10));

#suite s21_strpbrk
#tcase s21_strpbrk
#test test_s21_strpbrk_01
    char str1[11] = "0123456789", str2[4] = "369", str3[4] = "369";
    char *a, *b;
    a = s21_strpbrk(str1, str2);
    b = strpbrk(str1, str3);
    ck_assert_str_eq(a, b);
#test test_s21_strpbrk_02
    char str1[11] = "0123456789", str2[4] = "b", str3[4] = "b";
    char *a, *b;
    a = s21_strpbrk(str1, str2);
    b = strpbrk(str1, str3);
    fail_unless(a == b);

#suite s21_strstr
#tcase s21_strstr
#test test_s21_strstr_01
    char str1[7] = "012345", str2[2] = "3", str3[2] = "3";
    char *a, *b;
    a = s21_strstr(str1, str2);
    b = strstr(str1, str3);
    ck_assert_ptr_eq(a, b);
#test test_s21_strstr_02
    char str1[7] = "012345", str2[2] = "a", str3[2] = "a";
    char *a, *b;
    a = s21_strstr(str1, str2);
    b = strstr(str1, str3);
    fail_unless(a == b);
#test test_s21_strstr_03
    char str1[7] = "012345", str2[2] = "", str3[2] = "";
    char *a, *b;
    a = s21_strstr(str1, str2);
    b = strstr(str1, str3);
    fail_unless(a == b);

#suite s21_memset
#tcase s21_memset
#test s21_memset_01
    char hello1[15] = "Hello";
    char hello2[15] = "Hello";
    ck_assert_str_eq(s21_memset(hello1, 'a', 3), memset(hello2, 'a', 3));
#test s21_memset_02
    char hello1[15] = "Hello";
    char hello2[15] = "Hello";
    ck_assert_str_ne(s21_memset(hello1, 'a', 5), memset(hello2, 'b', 5));
#test s21_memset_03
    char hello1[15] = "Hello";
    char hello2[15] = "Hello";
    ck_assert_str_eq(s21_memset(hello1, '0', 10), memset(hello2, '0', 10));
#test s21_memset_04
    char hello1[15] = "Hello";
    char hello2[15] = "Hello";
    ck_assert_str_eq(s21_memset(hello1, '\0', 5), memset(hello2, '\0', 1));

#suite s21_strcat
#tcase s21_strcat
#test test_s21_strcat_01
    char hello1[15] = "Hello";
    char hello2[15] = "Hello";
    char world[15] = ", World";
	ck_assert_str_eq(s21_strcat(hello1, world), strcat(hello2, world));
#test test_s21_strcat_02
    char hello1[15] = "Hello\0";
    char hello2[15] = "Hello";
    char world[15] = ", World";
	ck_assert_str_eq(s21_strcat(hello1, world), strcat(hello2, world));
#test test_s21_strcat_03
    char hello1[15] = "Hello ";
    char hello2[15] = "Hello";
    char world[15] = ", World";
	ck_assert_str_ne(s21_strcat(hello1, world), strcat(hello2, world));
#test test_s21_strcat_04
    char hello1[15] = "Hello";
    char hello2[15] = "Hello";
    char world1[15] = ", World";
	char world2[15] = ", World";
	ck_assert_str_eq(s21_strcat(hello1, world1), strcat(hello2, world2));

#suite s21_strncat
#tcase s21_strncat
#test test_s21_strncat_01
    char hello1[15] = "Hello";
    char hello2[15] = "Hello";
    char world[15] = ", World";
	ck_assert_str_eq(s21_strncat(hello1, world, 3), strncat(hello2, world, 3));
#test test_s21_strncat_02
    char hello1[15] = "Hello";
    char hello2[15] = "Hello";
    char world[15] = ", World";
	ck_assert_str_eq(s21_strncat(hello1, world, 8), strncat(hello2, world, 10));
#test test_s21_strncat_03
    char hello1[15] = "Hello";
    char hello2[15] = "Hello";
    char world[15] = ", World";
	ck_assert_str_eq(s21_strncat(hello1, world, 0), strncat(hello2, world, 0));
#test test_s21_strncat_04
    char hello1[15] = "Hello";
    char hello2[15] = "Hello";
    char world[30] = "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";
	ck_assert_str_eq(s21_strncat(hello1, world, 2), strncat(hello2, world, 7));

#suite s21_strchr
#tcase s21_strchr
#test test_s21_strchr_01
    char hello[15] = "Hello";
	ck_assert_ptr_eq(s21_strchr(hello, 'l'), strchr(hello, 'l'));
#test test_s21_strchr_02
    char hello[15] = "Hello";
	ck_assert_ptr_ne(s21_strchr(hello, 'l'), strchr(hello, 'e'));
#test test_s21_strchr_03
    char hello1[15] = "Hello";
    char hello2[15] = "Hello";
    ck_assert_ptr_ne(s21_strchr(hello1, 'e'), strchr(hello2, 'e'));
#test test_s21_strchr_04
    char hello1[15] = "Hello";
	char hello2[15] = "Hello";
	ck_assert_str_eq(s21_strchr(hello1, 'e'), strchr(hello2, 'e'));
#test test_s21_strchr_05
    char hello1[15] = "Hello";
	char hello2[15] = "Hello";
	ck_assert_ptr_ne(s21_strchr(hello1, 'e'), strchr(hello2, 'l'));
#test test_s21_strrchr_06
    char hello1[15] = "Hello";
	char hello2[15] = "Hello";
	ck_assert_ptr_eq(s21_strrchr(hello1, 'a'), strrchr(hello2, 'a'));
#test test_s21_strrchr_07
    char hello1[1] = "";
    ck_assert_ptr_eq(s21_strrchr(hello1, '\0'), strrchr(hello1, '\0'));

#suite s21_strcpy
#tcase s21_strcpy
#test test_s21_strcpy_01
    char hello1[15] = "Hello";
	char hello2[15] = "Hello";
	char world1[15] = "World";
	char world2[15] = "World";
	ck_assert_str_eq(s21_strcpy(hello1, world1), strcpy(hello2, world2));
#test test_s21_strcpy_02
    char hello1[15] = "Hello";
	char hello2[15] = "Hello";
	char world1[15] = "World";
	char world2[15] = "World";
	ck_assert_str_ne(s21_strcpy(world1, hello1), strcpy(hello2, world2));
#test test_s21_strcpy_03
    char hello1[15] = "Hello";
	char hello2[15] = "Hello";
	char world1[15] = "World";
	char world2[15] = "World";
	ck_assert_ptr_ne(s21_strcpy(hello1, world1), strcpy(hello2, world2));
#test test_s21_strcpy_04
    char hello[15] = "Hello";
	char world1[15] = "World";
	char world2[15] = "\0";
	ck_assert_ptr_eq(s21_strcpy(hello, world1), strcpy(hello, world2));

#suite s21_strncpy
#tcase s21_strncpy
#test test_s21_strncpy_01
    char hello1[15] = "Hello";
	char hello2[15] = "Hello";
	char world1[15] = "World";
	char world2[15] = "World";
	ck_assert_str_eq(s21_strncpy(hello1, world1, 3), strncpy(hello2, world2, 3));
#test test_s21_strncpy_02
    char hello1[15] = "Hello";
	char hello2[15] = "Hello";
	char world1[15] = "World";
	char world2[15] = "World";
	ck_assert_str_eq(s21_strncpy(hello1, world1, 10), strncpy(hello2, world2, 10));
#test test_s21_strncpy_03
    char hello[15] = "Hello";
	char world1[15] = "World";
	char world2[15] = "World";
	ck_assert_str_eq(s21_strncpy(hello, world1, 5), world2);
#test test_s21_strncpy_04
    char hello[15] = "Hello";
	char world1[15] = "World";
	char world2[15] = "World";
	ck_assert_str_eq(s21_strncpy(hello, world1, 20), world2);

#suite s21_strrchr
#tcase s21_strrchr
#test test_s21_strrchr_01
    char hello[15] = "Hello";
	ck_assert_ptr_eq(s21_strrchr(hello, 'l'), strrchr(hello, 'l'));
#test test_s21_strrchr_02
    char hello[15] = "Hello";
	ck_assert_ptr_ne(s21_strrchr(hello, 'l'), strrchr(hello, 'e'));
#test test_s21_strrchr_03
    char hello1[15] = "Hello";
	char hello2[15] = "Hello";
	ck_assert_ptr_ne(s21_strrchr(hello1, 'e'), strrchr(hello2, 'e'));
#test test_s21_strrchr_04
    char hello1[15] = "Hello";
	char hello2[15] = "Hello";
	ck_assert_str_eq(s21_strrchr(hello1, 'e'), strrchr(hello2, 'e'));
#test test_s21_strrchr_05
    char hello1[15] = "Hello";
	char hello2[15] = "Hello";
	ck_assert_ptr_ne(s21_strrchr(hello1, 'e'), strrchr(hello2, 'l'));

#suite s21_strtok
#tcase s21_strtok
#test test_strtok_01
    char hello1[50] = "Hello, Hello, Hello, Hello";
	char hello2[50] = "Hello, Hello, Hello, Hello";
	char ch[10] = ", ";
	ck_assert_ptr_ne(s21_strtok(hello1, ch), strtok(hello2, ch));
#test test_strtok_02
    char hello[50] = "Hello, Hello, Hello, Hello";
	char ch1[10] = ", ";
	char ch2[10] = ", ";
	ck_assert_ptr_eq(s21_strtok(hello, ch1), strtok(hello, ch2));
#test test_strtok_03
    char hello1[50] = "Hello, Hello, Hello, Hello";
	char hello2[50] = "Hello, Hello, Hello, Hello";
	char ch1[10] = ", ";
	char ch2[10] = ", ";
	ck_assert_str_eq(s21_strtok(hello1, ch1), strtok(hello2, ch2));
#test test_strtok_04
    char hello1[50] = "Hello, Hello, Hello, Hello";
	char hello2[50] = "Hello, Hello, Hello, Hello";
	char ch1[10] = ", ";
	char ch2[10] = " ,";
	ck_assert_str_eq(s21_strtok(hello1, ch1), strtok(hello2, ch2));
#test test_strtok_05
    char i1[4] = "abc", i2[4] = "abc", j1[4] = "abc", j2[4] = "abc";
    fail_unless(s21_strtok(i1, j1) == 0 && strtok(i2, j2) == 0);
#test test_strtok_06
    char *i1 = "0", *i2 = "0", j1[4] = "a", j2[4] = "b";
    fail_unless(s21_strtok(i1, j1) == strtok(i2, j2));
#test test_strtok_07
    char *i1 = 0, *i2 = 0, j1[4] = ",", j2[4] = ",";
    fail_unless(s21_strtok(i1, j1) == strtok(i2, j2));

#suite s21_memchr
#tcase s21_memchr
#test test_memchr_01
    char *s1 = "";
    fail_unless(memchr(s1, 'x', 0) == s21_memchr(s1, 'x', 0));
#test test_s21_memchr_02
    char *s2 = "abcdefabcdef";
    fail_unless(memchr(s2, 'y', 0) == s21_memchr(s2, 'y', 0));
#test test_s21_memchr_03
    char *s3 = "11111111111111111111";
    fail_unless((char *)memchr(s3, '1', 20) - s3 == (char *)s21_memchr(s3, '1', 20) - s3);
#test test_s21_memchr_04
    char *s2 = "abcdefabcdef";
    fail_unless((char *)memchr(s2, 'a', 1) - s2 == (char *)s21_memchr(s2, 'a', 1) - s2);
#test test_s21_memchr_05
    char *s2 = "abcdefabcdef";
    fail_unless((char *)memchr(s2, 'd', 12) - s2 == (char *)s21_memchr(s2, 'd', 12) - s2);
#test test_s21_memchr_06
    char *s2 = "abcdefabcdef";
    fail_unless((char *)memchr(s2, 'f', 12) - s2 == (char *)s21_memchr(s2, 'f', 12) - s2);
#test test_s21_memchr_07
    char *s2 = "abcdefabcdef";
    fail_unless(memchr(s2, 'd', 2) == s21_memchr(s2, 'd', 2));

#suite s21_memcmp
#tcase s21_memcmp
#test test_s21_memcmp_01
    char *s1 = "a", *s2 = "a";
    fail_unless(memcmp(s1, s2, 1) == s21_memcmp(s1, s2, 1));
#test test_s21_memcmp_02
    char *s1 = "a", *s3 = "b";
    fail_unless(memcmp(s1, s3, 1) == s21_memcmp(s1, s3, -1));
#test test_s21_memcmp_03
    char *s3 = "b", *s4 = "c";
    fail_unless(memcmp(s4, s3, 1) == s21_memcmp(s4, s3, 1));

#suite s21_memcpy
#tcase s21_memcpy
#test test_s21_memcpy_01
    char s1[5] = "a", s2[5] = "a", s3[2] = "b";
    ck_assert_str_eq(s21_memcpy(s1, s3, 1), memcpy(s2, s3, 1));

#suite s21_strcmp
#tcase s21_strcmp
#test test_s21_strcmp_01
    char s1[3] = "ab", s2[3] = "ab";
    fail_unless(s21_strcmp(s1, s2) == strcmp(s1, s2));
#test test_s21_strcmp_02
    char s1[3] = "ab", s3[3] = "aa";
    fail_unless(s21_strcmp(s1, s3) == strcmp(s1, s3));
#test test_s21_strcmp_03
    char s1[3] = "ab", s4[3] = "ac";
    fail_unless(s21_strcmp(s1, s4) == strcmp(s1, s4));
#test test_s21_strcmp_04
    char s1[3] = "ab", s5[2] = "a";
    fail_unless(s21_strcmp(s1, s5) > 0 && strcmp(s1, s5) > 0);
#test test_s21_strcmp_05
    char s1[3] = "ab", s6[4] = "abc";
    fail_unless(s21_strcmp(s1, s6) < 0 && strcmp(s1, s6) < 0);

#suite s21_strncmp
#tcase s21_strncmp
#test test_s21_strncmp_01
    char s1[3] = "ab", s2[3] = "ab";
    fail_unless(s21_strncmp(s1, s2, 2) == strncmp(s1, s2, 2));
#test test_s21_strncmp_02
    char s1[4] = "abc", s2[4] = "aac";
    fail_unless(s21_strncmp(s1, s2, 3) == strncmp(s1, s2, 3));
#test test_s21_strncmp_03
    char s1[4] = "abc", s2[4] = "acc";
    fail_unless(s21_strncmp(s1, s2, 3) == strncmp(s1, s2, 3));
#test test_s21_strncmp_04
    char s1[4] = "abc", s2[3] = "ab";
    fail_unless(s21_strncmp(s1, s2, 3) > 0 && strncmp(s1, s2, 3) > 0);
#test test_s21_strncmp_05
    char s1[3] = "ab", s2[4] = "abc";
    fail_unless(s21_strncmp(s1, s2, 3) < 0 && strncmp(s1, s2, 3) < 0);

#suite s21_strcspn
#tcase s21_strcspn
#test test_s21_strcspn_01
    char s1[4] = "abc", s2[2] = "b";
    fail_unless(s21_strcspn(s1, s2) == strcspn(s1, s2));
#test test_s21_strcspn_02
    char s1[4] = "abc", s2[2] = "d";
    fail_unless(s21_strcspn(s1, s2) == strcspn(s1, s2));
#test test_s21_strcspn_03
    char s1[4] = "abc", s2[4] = "abc";
    fail_unless(s21_strcspn(s1, s2) == strcspn(s1, s2));

#suite s21_strspn
#tcase s21_strspn
#test test_s21_strspn_01
    char s1[4] = "abc", s2[2] = "b";
    fail_unless(s21_strspn(s1, s2) == strspn(s1, s2));
#test test_s21_strspn_02
    char s1[4] = "abc", s2[2] = "d";
    fail_unless(s21_strspn(s1, s2) == strspn(s1, s2));
#test test_s21_strspn_03
    char s1[4] = "abc", s2[4] = "abc";
    fail_unless(s21_strspn(s1, s2) == strspn(s1, s2));

#suite s21_strerror
#tcase s21_strerror
#test test_s21_strerror_01
    char *s1 = s21_strerror(100);
    char *s2 = strerror(100);
	ck_assert_str_eq(s1, s2);
#test test_s21_strerror_02
    char *s1 = s21_strerror(-50);
    char *s2 = strerror(-50);
	ck_assert_str_eq(s1, s2);

#suite s21_sprintf
#tcase s21_sprintf_01
#test test_s21_sprintf_01
    char buffer1[100];
    char buffer2[100];
    s21_sprintf(buffer1, "Hello %% %c %s %d %i %u %f %+10ld, %-10lu, % 10hd, %.5ld, %lc", 'A', "TEST", 115, 115, 115, 115.15, (long int)115, (unsigned long int)115, 3, (long int)3, 's');
    sprintf(buffer2, "Hello %% %c %s %d %i %u %f %+10ld, %-10lu, % 10hd, %.5ld, %lc", 'A', "TEST", 115, 115, 115, 115.15, (long int)115, (unsigned long int)115, 3, (long int)3, 's');
	ck_assert_str_eq(buffer1, buffer2);
#test test_s21_sprintf_02
    char buffer3[1024];
    char buffer4[1024];
    s21_sprintf(buffer3, "%.hu % 10ld, %.5d %.5ld %.lu %.10hu %.10lu", 0, (long int)115, 0, (long int)0, (unsigned long int)0, 113, (unsigned long int)113);
    sprintf(buffer4, "%.hu % 10ld, %.5d %.5ld %.lu %.10hu %.10lu", 0, (long int)115, 0, (long int)0, (unsigned long int)0, 113, (unsigned long int)113);
	ck_assert_str_eq(buffer3, buffer4);
#test test_s21_sprintf_03
    char buffer5[1024];
    char buffer6[1024];
    s21_sprintf(buffer5, "%u %.10u %.u %.f %.5f", 113, 113, 0, 15.15, 15.15);
    sprintf(buffer6, "%u %.10u %.u %.f %.5f", 113, 113, 0, 15.15, 15.15);
	ck_assert_str_eq(buffer5, buffer6);
#test test_s21_sprintf_04   
    char buffer7[100];
    char buffer8[100];
    s21_sprintf(buffer7, "ad %+d", 12);
    sprintf(buffer8, "ad %+d", 12);
	ck_assert_str_eq(buffer7, buffer8);

#tcase s21_sprintf_02
#test test_s21_sprintf_case02_01
    char str1[100], str2[100];
    s21_sprintf(str1, "%.5d % 5.4d %5d %+d % 5.4hd %5hd %+hd %ld %.2hd %hd %.4d %.4hd %.4ld %+.4ld", 0, 123, 124, 125, 126, 127, 128, (long int)-129, 0, -130, 131, 132, (long int)133, (long int)134);
    sprintf(str2, "%.5d % 5.4d %5d %+d % 5.4hd %5hd %+hd %ld %.2hd %hd %.4d %.4hd %.4ld %+.4ld", 0, 123, 124, 125, 126, 127, 128, (long int)-129, 0, -130, 131, 132, (long int)133, (long int)134);
    ck_assert_str_eq(str1, str2);
#test test_s21_sprintf_case02_02
    char str3[100], str4[100];
    s21_sprintf(str3, "%+.4ld %+f % f %f", (long int)134, 135.678, 136.789, -137.89);
    sprintf(str4, "%+.4ld %+f % f %f", (long int)134, 135.678, 136.789, -137.89);
    ck_assert_int_eq(strlen(str3), strlen(str4));
    ck_assert_str_eq(str3, str4);
#test test_s21_sprintf_case02_03
    char str1[100], str2[100];
    s21_sprintf(str1, "%d %ld %hd", 0, (long int)0, (short int)0);
    sprintf(str2, "%d %ld %hd", 0, (long int)0, (short int)0);
    ck_assert_str_eq(str1, str2);
#test test_s21_sprintf_case02_04
    char str1[100], str2[100];
    s21_sprintf(str1, "%5f", 12.34);
    sprintf(str2, "%5f", 12.34);
    ck_assert_str_eq(str1, str2);
#test test_s21_sprintf_case02_05
    char str1[15], str2[15];
    s21_sprintf(str1, "%lu", 12345678901);
    sprintf(str2, "%lu", 12345678901);
    ck_assert_int_eq(strlen(str1), strlen(str2));
    ck_assert_str_eq(str1, str2);
#test test_s21_sprintf_case02_06
    char str1[15], str2[15];
    s21_sprintf(str1, "%.0f %.0d", 12.345, 1531);
    sprintf(str2, "%.0f %.0d", 12.345, 1531);
    ck_assert_int_eq(strlen(str1), strlen(str2));
    ck_assert_str_eq(str1, str2);
#test test_s21_sprintf_case02_07
    char str1[15], str2[15];
    s21_sprintf(str1, "%0.0ld", 33333333333);
    sprintf(str2, "%ld", 33333333333);
    ck_assert_int_eq(strlen(str1), strlen(str2));
    ck_assert_str_eq(str1, str2);
#test test_s21_sprintf_case02_08
    char str1[15], str2[15];
    s21_sprintf(str1, "%f", 1.001);
    sprintf(str2, "%f", 1.001);
    ck_assert_str_eq(str1, str2);
    ck_assert_int_eq(strlen(str1), strlen(str2));
#test test_s21_sprintf_case02_09
    char str1[15], str2[15];
    s21_sprintf(str1, "%f", 0.000001);
    sprintf(str2, "%f", 0.000001);
    ck_assert_str_eq(str1, str2);
    ck_assert_int_eq(strlen(str1), strlen(str2));
#test test_s21_sprintf_case02_10
    char str1[15], str2[15];
    s21_sprintf(str1, "%.0d", 0);
    sprintf(str2, "%.0d", 0);
    ck_assert_str_eq(str1, str2);
    ck_assert_int_eq(strlen(str1), strlen(str2));
#test test_s21_sprintf_case02_11
    char str1[50];
    char str2[50];
    s21_sprintf(str1, "% d", 0);
    sprintf(str2, "% d", 0);
    ck_assert_str_eq(str1, str2);
    ck_assert_int_eq(strlen(str1), strlen(str2));
#test test_s21_sprintf_case02_12
    char str1[50];
    char str2[50];
    s21_sprintf(str1, "%u", (unsigned)0);
    sprintf(str2, "%u", (unsigned)0);
    ck_assert_str_eq(str1, str2);
    ck_assert_int_eq(strlen(str1), strlen(str2));

#tcase s21_sprintf_03
#test test_s21_sprintf_01_s_decimal
    char str1[100], str2[100];
    s21_sprintf(str1, "%.5s", "Greetings, everyone!");
    sprintf(str2, "%.5s", "Greetings, everyone!");
    ck_assert_str_eq(str1, str2);
#test test_s21_sprintf_02_f_minus_1
    char str1[100], str2[100];
    s21_sprintf(str1, "%.1f", 12.3456);
    sprintf(str2, "%.1f", 12.3456);
    ck_assert_str_eq(str1, str2);
#test test_s21_sprintf_03_f_21
    char str1[100], str2[100];
    s21_sprintf(str1, "%.9f", 12.3456);
    sprintf(str2, "%.9f", 12.3456);
    ck_assert_str_eq(str1, str2);
#test test_s21_sprintf_04_f_zero
    char str1[100], str2[100];
    s21_sprintf(str1, "%f", 0.0);
    sprintf(str2, "%f", 0.0);
    ck_assert_str_eq(str1, str2);
#test test_s21_sprintf_05_u_long_zero
    char str1[100], str2[100];
    s21_sprintf(str1, "%lu", (unsigned long int)0);
    sprintf(str2, "%lu", (unsigned long int)0);
    ck_assert_str_eq(str1, str2);
#test test_s21_sprintf_06_u_short_zero
    char str1[100], str2[100];
    s21_sprintf(str1, "%hu", (short int)0);
    sprintf(str2, "%hu", (short int)0);
    ck_assert_str_eq(str1, str2);
#test test_s21_sprintf_07_d_all_zero
    char str1[1024], str2[1024];
    s21_sprintf(str1, "%d %+d %-d % d %5d %.d %.5d %+5.5d %-5.5d % 5.5d %d %.d %.d", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    sprintf(str2, "%d %+d %-d % d %5d %.d %.5d %+5.5d %-5.5d % 5.5d %d %.d %.d", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    ck_assert_str_eq(str1, str2);
#test test_s21_sprintf_08_d_short_all_zero
    char str1[1024], str2[1024];
    s21_sprintf(str1, "%hd %+hd %-hd % hd %5hd %.hd %.5hd %+5.5hd %-5.5hd % 5.5hd %hd %.hd %.hd", (short int)0, (short int)0, (short int)0, (short int)0, (short int)0, (short int)0, (short int)0, (short int)0, (short int)0, (short int)0, (short int)0, (short int)0, (short int)0);
    sprintf(str2, "%hd %+hd %-hd % hd %5hd %.hd %.5hd %+5.5hd %-5.5hd % 5.5hd %hd %.hd %.hd", (short int)0, (short int)0, (short int)0, (short int)0, (short int)0, (short int)0, (short int)0, (short int)0, (short int)0, (short int)0, (short int)0, (short int)0, (short int)0);
    ck_assert_str_eq(str1, str2);
#test test_s21_sprintf_09_d_long_all_zero
    char str1[1024], str2[1024];
    s21_sprintf(str1, "%ld %+ld %-ld % ld %5ld %.ld %.5ld %+5.5ld %-5.5ld % 5.5ld %ld %.ld %.ld", (long int)0, (long int)0, (long int)0, (long int)0, (long int)0, (long int)0, (long int)0, (long int)0, (long int)0, (long int)0, (long int)0, (long int)0, (long int)0);
    sprintf(str2, "%ld %+ld %-ld % ld %5ld %.ld %.5ld %+5.5ld %-5.5ld % 5.5ld %ld %.ld %.ld", (long int)0, (long int)0, (long int)0, (long int)0, (long int)0, (long int)0, (long int)0, (long int)0, (long int)0, (long int)0, (long int)0, (long int)0, (long int)0);
    ck_assert_str_eq(str1, str2);
#test test_s21_sprintf_10_d_all_poz
    char str1[1024], str2[1024];
    s21_sprintf(str1, "%d %+d %-d % d %5d %.d %.5d %+5.5d %-5.5d % 5.5d %d %.d %.d", 1, 20, 300, 4000, 50000, 123, 124, 125, 126, 127, 128, 129, 130);
    sprintf(str2, "%d %+d %-d % d %5d %.d %.5d %+5.5d %-5.5d % 5.5d %d %.d %.d", 1, 20, 300, 4000, 50000, 123, 124, 125, 126, 127, 128, 129, 130);
    ck_assert_str_eq(str1, str2);
#test test_s21_sprintf_11_d_all_neg
    char str1[1024], str2[1024];
    s21_sprintf(str1, "%d %+d %-d % d %5d %.d %.5d %+5.5d %-5.5d % 5.5d %d %.d %.d", -1, -20, -300, -4000, -50000, -123, -124, -125, -126, -127, -128, -129, -130);
    sprintf(str2, "%d %+d %-d % d %5d %.d %.5d %+5.5d %-5.5d % 5.5d %d %.d %.d", -1, -20, -300, -4000, -50000, -123, -124, -125, -126, -127, -128, -129, -130);
    ck_assert_str_eq(str1, str2);

#tcase s21_sprintf_04
#test test_s21_sprintf_01_u_all_zero
    char str1[1024], str2[1024];
    s21_sprintf(str1, "%u %u %-u %u %5u %.u %.5u %5.5u %-5.5u %5.5u %u %.u %.u", (unsigned)0, (unsigned)0, (unsigned)0, (unsigned)0, (unsigned)0, (unsigned)0, (unsigned)0, (unsigned)0, (unsigned)0, (unsigned)0, (unsigned)0, (unsigned)0, (unsigned)0);
    sprintf(str2, "%u %u %-u %u %5u %.u %.5u %5.5u %-5.5u %5.5u %u %.u %.u", (unsigned)0, (unsigned)0, (unsigned)0, (unsigned)0, (unsigned)0, (unsigned)0, (unsigned)0, (unsigned)0, (unsigned)0, (unsigned)0, (unsigned)0, (unsigned)0, (unsigned)0);
    ck_assert_str_eq(str1, str2);
#test test_s21_sprintf_02_u_short_all_zero
    char str1[1024], str2[1024];
    s21_sprintf(str1, "%hu %hu %-hu %hu %5hu %.hu %.5hu %5.5hu %-5.5hu %5.5hu %hu %.hu %.hu", (short int)0, (short int)0, (short int)0, (short int)0, (short int)0, (short int)0, (short int)0, (short int)0, (short int)0, (short int)0, (short int)0, (short int)0, (short int)0);
    sprintf(str2, "%hu %hu %-hu %hu %5hu %.hu %.5hu %5.5hu %-5.5hu %5.5hu %hu %.hu %.hu", (short int)0, (short int)0, (short int)0, (short int)0, (short int)0, (short int)0, (short int)0, (short int)0, (short int)0, (short int)0, (short int)0, (short int)0, (short int)0);
    ck_assert_str_eq(str1, str2);
#test test_s21_sprintf_03_u_long_all_zero
    char str1[1024], str2[1024];
    s21_sprintf(str1, "%lu %lu %-lu %lu %5lu %.lu %.5lu %5.5lu %-5.5lu %5.5lu %lu %.lu %.lu", (unsigned long int)0, (unsigned long int)0, (unsigned long int)0, (unsigned long int)0, (unsigned long int)0, (unsigned long int)0, (unsigned long int)0, (unsigned long int)0, (unsigned long int)0, (unsigned long int)0, (unsigned long int)0, (unsigned long int)0, (unsigned long int)0);
    sprintf(str2, "%lu %lu %-lu %lu %5lu %.lu %.5lu %5.5lu %-5.5lu %5.5lu %lu %.lu %.lu", (unsigned long int)0, (unsigned long int)0, (unsigned long int)0, (unsigned long int)0, (unsigned long int)0, (unsigned long int)0, (unsigned long int)0, (unsigned long int)0, (unsigned long int)0, (unsigned long int)0, (unsigned long int)0, (unsigned long int)0, (unsigned long int)0);
    ck_assert_str_eq(str1, str2);
#test test_s21_sprintf_04_u_all_poz
    char str1[1024], str2[1024];
    s21_sprintf(str1, "%u %u %-u %u %5u %.u %.5u %5.5u %-5.5u %5.5u %u %.u %.u", (unsigned)1, (unsigned)20, (unsigned)300, (unsigned)4000, (unsigned)50000, (unsigned)123, (unsigned)124, (unsigned)125, (unsigned)126, (unsigned)127, (unsigned)128, (unsigned)129, (unsigned)130);
    sprintf(str2, "%u %u %-u %u %5u %.u %.5u %5.5u %-5.5u %5.5u %u %.u %.u", (unsigned)1, (unsigned)20, (unsigned)300, (unsigned)4000, (unsigned)50000, (unsigned)123, (unsigned)124, (unsigned)125, (unsigned)126, (unsigned)127, (unsigned)128, (unsigned)129, (unsigned)130);
    ck_assert_str_eq(str1, str2);

#tcase s21_sprintf_05
#test test_s21_sprintf_01_0d
    char str1[100];
    char str2[100];
    char *buf = "%-.hd %+.ld % .d %.d";
    s21_sprintf(str1, buf, 0, 0, 0, 0);
    sprintf(str2, buf, 0, 0, 0, 0);
    ck_assert_str_eq(str1, str2);